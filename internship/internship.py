# -*- coding: utf-8 -*-
"""internship

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pvHEGG6x882yMtvKuB92oquYnmxbsoFm
"""

def recommend_vehicle(total_volume_cuft, max_length, max_width, max_height):
    if total_volume_cuft <= 30 and max_length <= 5 and max_width <= 4 and max_height <= 3:
        return "Goods Auto"
    elif total_volume_cuft <= 250:
        return "Tata Ace"
    elif total_volume_cuft <= 500:
        return "Truck"
    else:
        return "Large Tempo"

vehicle = recommend_vehicle(25, 2.8, 2.5, 20)
print(vehicle)

def recommend_vehicle1(total_volume_cuft, max_length, max_width, max_height):
    if total_volume_cuft <= 30 and max_length <= 5 and max_width <= 4 and max_height <= 4:
        return "Goods Auto"
    elif total_volume_cuft <= 250 and max_length <= 7 and max_width <= 4.5 and max_height <= 5:
        return "Tata Ace"
    elif total_volume_cuft <= 500 and max_length <= 8 and max_width <= 5 and max_height <= 6:
        return "Truck"
    else:
        return "Large Tempo"



recommend_vehicle1(21, 2.8, 2.5, 6)

def recommend_vehicle(total_volume_cuft, max_length, max_width, max_height):
    vehicles = [
        {
            "name": "TATA Ace 6ft",
            "max_volume": 96,
            "max_length": 6,
            "max_width": 4,
            "max_height": 4
        },
        {
            "name": "TATA Super Ace 8ft",
            "max_volume": 180,
            "max_length": 8,
            "max_width": 4.5,
            "max_height": 5
        },
        {
            "name": "Bolero Pickup 10ft",
            "max_volume": 275,
            "max_length": 10,
            "max_width": 5,
            "max_height": 5.5
        },
        {
            "name": "Eicher 14ft",
            "max_volume": 546,
            "max_length": 14,
            "max_width": 6,
            "max_height": 6.5
        },
        {
            "name": "Eicher 17ft",
            "max_volume": 714,
            "max_length": 17,
            "max_width": 6,
            "max_height": 7
        },
        {
            "name": "Eicher 19ft",
            "max_volume": 864,
            "max_length": 19,
            "max_width": 6.5,
            "max_height": 7
        }
    ]
    for vehicle in vehicles:
        if (
            total_volume_cuft <= vehicle["max_volume"] and
            max_length <= vehicle["max_length"] and
            max_width <= vehicle["max_width"] and
            max_height <= vehicle["max_height"]
        ):
            return vehicle["name"]
    return "No suitable vehicle found"

# Item dimensions
total_volume_cuft = 21
max_length = 2.8
max_width = 2.5
max_height = 3
vehicle = recommend_vehicle(total_volume_cuft, max_length, max_width, max_height)
print(vehicle)

def recommend_vehicle(total_volume_cuft, max_length, max_width, max_height):
    vehicles = [
        {
            "name": "TATA Ace 6ft",
            "max_volume": 96,
            "max_length": 6,
            "max_width": 4,
            "max_height": 4
        },
        {
            "name": "TATA Super Ace 8ft",
            "max_volume": 180,
            "max_length": 8,
            "max_width": 4.5,
            "max_height": 5
        },
        {
            "name": "Bolero Pickup 10ft",
            "max_volume": 275,
            "max_length": 10,
            "max_width": 5,
            "max_height": 5.5
        },
        {
            "name": "Eicher 14ft",
            "max_volume": 546,
            "max_length": 14,
            "max_width": 6,
            "max_height": 6.5
        },
        {
            "name": "Eicher 17ft",
            "max_volume": 714,
            "max_length": 17,
            "max_width": 6,
            "max_height": 7
        },
        {
            "name": "Eicher 19ft",
            "max_volume": 864,
            "max_length": 19,
            "max_width": 6.5,
            "max_height": 7
        }
    ]

    for vehicle in vehicles:
        if (
            total_volume_cuft <= vehicle["max_volume"] and
            max_length <= vehicle["max_length"] and
            max_width <= vehicle["max_width"] and
            max_height <= vehicle["max_height"]
        ):
            return vehicle["name"]
    return "No suitable vehicle found"

vehicle = recommend_vehicle(200, 7.5, 4.4, 5.2)
print(vehicle)

"""Input data"""

import json
import pandas as pd
with open('/content/data.json', 'r') as f: data = json.load(f)

filtered_items = []

for category in data.get("inventory", []):
    for subcategory in category.get("category", []):
        for item in subcategory.get("items", []):
            qty = item.get("qty", 0)
            if qty >= 1:
                name = item.get("displayName", item.get("name", "Unknown"))
                leng th = item.get("length_ft", 0)
                width = item.get("width_ft", 0)
                height = item.get("height_ft", 0)
                item_volume = item.get("item_volume_cuft", round(length * width * height, 2))
                total_volume = item.get("total_item_volume_cuft", round(item_volume * qty, 2))

                filtered_items.append({
                    "Item Name": name,
                    "Length (ft)": length,
                    "Width (ft)": width,
                    "Height (ft)": height,
                    "Quantity": qty,
                    "Item Volume (cuft)": item_volume,
                    "Total Volume (cuft)": total_volume
                })

df = pd.DataFrame(filtered_items)
print(df.to_string(index=True))

df.to_csv("filtered_inventory.csv", index=True)

import json

with open('data.json', 'r') as f:
    data = json.load(f)

container_length = 14
container_width = 6.5
container_height = 6.5
container_volume = container_length * container_width * container_height

total_used_volume = 0

packed_items = []

for category in data['inventory']:
    for subcategory in category.get('category', []):
        for item in subcategory.get('items', []):
            qty = item.get('qty', 0)
            volume_per_item = item.get('item_volume_cuft', 0)

            if qty > 0:
                item_total_volume = volume_per_item * qty
                total_used_volume += item_total_volume
                packed_items.append({
                    "Item Name": item.get('displayName'),
                    "Quantity": qty,
                    "Volume per Item (cu ft)": volume_per_item,
                    "Total Volume (cu ft)": item_total_volume
                })

utilization_percent = (total_used_volume / container_volume) * 100
print("Packed Container Summary")
print(f"Container Dimensions (L×W×H): {container_length} × {container_width} × {container_height} ft")
print(f"Container Volume: {container_volume:.2f} cu ft")
print(f"Total Used Volume: {total_used_volume:.2f} cu ft")
print(f"Utilization: {utilization_percent:.2f}%\n")
print("Packed Items:")
for item in packed_items:
    print(f"- {item['Item Name']} (Qty: {item['Quantity']}, Total Volume: {item['Total Volume (cu ft)']:.2f} cu ft)")

import pandas as pd
df = pd.read_csv("Book1.csv", encoding='latin1')
df.to_json("output.json", orient="records", indent=4)
print(" Conversion successful! File saved as output.json")

from google.colab import files
files.download("output.json")

import json
import re

with open("/content/data.json") as f:
    inventory_data = json.load(f)

with open("/content/output.json") as f:
    truck_data = json.load(f)

total_used_volume = 0.0
for section in inventory_data["inventory"]:
    for category in section["category"]:
        for item in category["items"]:
            qty = item.get("qty", 0)
            volume_per_item = item.get("item_volume_cuft", 0)
            total_used_volume += qty * volume_per_item

packed_containers = []
for truck in truck_data:
    volume_str = truck.get("Volume (cu ft)", "")
    match = re.search(r"([\d.]+)", volume_str)
    if not match:
        continue
    container_volume = float(match.group(1))
    if total_used_volume <= container_volume:
        utilization = (total_used_volume / container_volume) * 100
        packed_containers.append({
            "Truck Type": truck.get("Truck Type"),
            "Dimensions (L×W×H)": truck.get("Dimensions (L \u00d7 W \u00d7 H)"),
            "Volume (cu ft)": round(container_volume, 2),
            "Total Used Volume (cu ft)": round(total_used_volume, 2),
            "Utilization %": round(utilization, 2)
        })
        break
print(json.dumps(packed_containers, indent=4))

import json
import re

with open("/content/output.json", "r") as f:
    trucks = json.load(f)

def extract_payload_range(payload_str):
    numbers = re.findall(r'\d+', payload_str)
    if not numbers:
        return 0
    return int(numbers[0])

light_trucks = []
heavy_trucks = []

for truck in trucks:
    payload_str = truck.get("Payload (kg)", "")
    min_payload = extract_payload_range(payload_str)

    if min_payload <= 1000:
        light_trucks.append(truck)
    else:
        heavy_trucks.append(truck)

with open("light_trucks.json", "w") as f:
    json.dump(light_trucks, f, indent=4)

with open("heavy_trucks.json", "w") as f:
    json.dump(heavy_trucks, f, indent=4)

print("Files created: light_trucks.json and heavy_trucks.json")

import json
import re

with open("/content/data.json") as f:
    inventory_data = json.load(f)

with open("/content/light_trucks.json") as f:
    light_trucks = json.load(f)

with open("/content/heavy_trucks.json") as f:
    heavy_trucks = json.load(f)

total_used_volume = 0.0
for section in inventory_data["inventory"]:
    for category in section["category"]:
        for item in category["items"]:
            qty = item.get("qty", 0)
            volume_per_item = item.get("item_volume_cuft", 0)
            total_used_volume += qty * volume_per_item

def find_suitable_truck(trucks, used_volume):
    for truck in trucks:
        volume_str = truck.get("Volume (cu ft)", "")
        match = re.search(r"([\d.]+)", volume_str)
        if not match:
            continue
        container_volume = float(match.group(1))
        if used_volume <= container_volume:
            utilization = (used_volume / container_volume) * 100
            return {
                "Truck Type": truck.get("Truck Type"),
                "Dimensions (L×W×H)": truck.get("Dimensions (L \u00d7 W \u00d7 H)"),
                "Volume (cu ft)": round(container_volume, 2),
                "Total Used Volume (cu ft)": round(used_volume, 2),
                "Utilization %": round(utilization, 2),
                "Notes": truck.get("Notes", "")
            }
    return None

selected_truck = find_suitable_truck(light_trucks, total_used_volume)
if not selected_truck:
    selected_truck = find_suitable_truck(heavy_trucks, total_used_volume)

if selected_truck:
    print(json.dumps(selected_truck, indent=4))
else:
    print("No suitable truck found for the given inventory volume.")

import json
import re

with open("/content/data.json") as f:
    inventory_data = json.load(f)

with open("/content/light_trucks.json") as f:
    light_trucks = json.load(f)

with open("/content/heavy_trucks.json") as f:
    heavy_trucks = json.load(f)

all_trucks = light_trucks + heavy_trucks
total_volume = 0.0
total_weight = 0.0
WEIGHT_PER_CUFT = 9

for section in inventory_data["inventory"]:
    for category in section["category"]:
        for item in category["items"]:
            qty = item.get("qty", 0)
            volume_per_item = item.get("item_volume_cuft", 0)
            item_total_volume = qty * volume_per_item
            total_volume += item_total_volume
            total_weight += item_total_volume * WEIGHT_PER_CUFT

def extract_kg(payload_str):
    if not payload_str:
        return 0
    payload_str = payload_str.replace("~", "").replace("–", "-").replace("\u0096", "-").replace("to", "-").lower()
    match = re.findall(r"(\d+\.?\d*)", payload_str)
    if "ton" in payload_str:
        tons = [float(m) for m in match]
        return max(tons) * 1000 if tons else 0
    else:
        kgs = [float(m) for m in match]
        return max(kgs) if kgs else 0

def extract_volume(volume_str):
    match = re.search(r"([\d.]+)", volume_str)
    return float(match.group(1)) if match else 0.0

suitable_trucks = []
for truck in all_trucks:
    volume_cuft = extract_volume(truck.get("Volume (cu ft)", ""))
    payload_kg = extract_kg(truck.get("Payload (kg)", ""))

    if total_volume <= volume_cuft and total_weight <= payload_kg:
        utilization = (total_volume / volume_cuft) * 100
        suitable_trucks.append({
            "Truck Type": truck.get("Truck Type"),
            "Dimensions (L×W×H)": truck.get("Dimensions (L \u00d7 W \u00d7 H)"),
            "Volume (cu ft)": round(volume_cuft, 2),
            "Payload Capacity (kg)": round(payload_kg),
            "Used Volume (cu ft)": round(total_volume, 2),
            "Estimated Weight (kg)": round(total_weight, 2),
            "Utilization %": round(utilization, 2),
            "Notes": truck.get("Notes", "")
        })
if suitable_trucks:
    best_truck = min(suitable_trucks, key=lambda x: x["Volume (cu ft)"])
    print(json.dumps(best_truck, indent=4))
else:
    print("No suitable truck found for the given volume and payload.")

import json
import re

with open("/content/data.json") as f:
    inventory_data = json.load(f)

with open("/content/light_trucks.json") as f:
    light_trucks = json.load(f)

with open("/content/heavy_trucks.json") as f:
    heavy_trucks = json.load(f)

all_trucks = light_trucks + heavy_trucks
total_volume = 0.0
volume_PER_CUFT = 2

for section in inventory_data["inventory"]:
    for category in section["category"]:
        for item in category["items"]:
            qty = item.get("qty", 0)
            volume_per_item = item.get("item_volume_cuft", 0)
            item_total_volume = qty * volume_per_item * volume_PER_CUFT
            total_volume += item_total_volume
def extract_volume(volume_str):
    match = re.search(r"([\d.]+)", volume_str)
    return float(match.group(1)) if match else 0.0
suitable_trucks = []
for truck in all_trucks:
    volume_cuft = extract_volume(truck.get("Volume (cu ft)", ""))
    if total_volume <= volume_cuft:
        utilization = (total_volume / volume_cuft) * 100
        suitable_trucks.append({
            "Truck Type": truck.get("Truck Type"),
            "Dimensions (L×W×H)": truck.get("Dimensions (L \u00d7 W \u00d7 H)"),
            "Volume (cu ft)": round(volume_cuft, 2),
            "Used Volume (cu ft)": round(total_volume, 2),
            "Utilization %": round(utilization, 2),
            "Notes": truck.get("Notes", "")
        })

if suitable_trucks:
    best_truck = min(suitable_trucks, key=lambda x: x["Volume (cu ft)"])
    print(json.dumps(best_truck, indent=4))
else:
    print("No suitable truck found for the given volume")

pip install flask

!pip install flask-ngrok

from google.colab import files
uploaded = files.upload()

from flask import Flask, request, jsonify
from flask_ngrok import run_with_ngrok
import json
import re
with open("data.json") as f:
    inventory_data = json.load(f)

with open("output.json") as f:
    truck_data = json.load(f)

app = Flask(__name__)
run_with_ngrok(app)

@app.route('/pack_truck', methods=['GET'])
def pack_truck():
    try:
        total_used_volume = 0.0
        for section in inventory_data.get("inventory", []):
            for category in section.get("category", []):
                for item in category.get("items", []):
                    qty = item.get("qty", 0)
                    volume_per_item = item.get("item_volume_cuft", 0)
                    total_used_volume += qty * volume_per_item
        matching_trucks = []
        for truck in truck_data:
            volume_str = truck.get("Volume (cu ft)", "")
            match = re.search(r"([\d.]+)", volume_str)
            if not match:
                continue
            container_volume = float(match.group(1))

            if total_used_volume <= container_volume:
                utilization = (total_used_volume / container_volume) * 100
                matching_trucks.append({
                    "Truck Type": truck.get("Truck Type"),
                    "Dimensions (L×W×H)": truck.get("Dimensions (L \u00d7 W \u00d7 H)"),
                    "Volume (cu ft)": round(container_volume, 2),
                    "Total Used Volume (cu ft)": round(total_used_volume, 2),
                    "Utilization %": round(utilization, 2)
                })
        matching_trucks.sort(key=lambda x: x["Utilization %"], reverse=True)

        return jsonify(matching_trucks if matching_trucks else [])

    except Exception as e:
        return jsonify({"error": str(e)}), 400

app.run()